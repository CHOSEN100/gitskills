//函数节流：函数只有在大于等于执行周期时才执行，周期内不执行


/**
 * 函数节流 throttle
 * @param {Object} func 要执行的函数
 * @param {Object} wait 等待时间
 * @param {Object} options 配置项，配置是否立即/延迟执行
 * {leading: false} 表示禁用第一次执行；{trailing: false} 表示禁用停止触发的回调（二选一）
 */
function throttle(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
        previous = options.leading === false ? 0 : new Date().getTime();
        timeout = null;
        func.apply(context, args);
        if (!timeout) context = args = null;
    };

    var throttled = function() {
        var now = new Date().getTime();
        if (!previous && options.leading === false) previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
            if (timeout) {
                clearTimeout(timeout);
                timeout = null;
            }
            previous = now;
            func.apply(context, args);
            if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
        }
    };
	
	throttled.cancel = function() {
	    clearTimeout(timeout);
	    previous = 0;
	    timeout = null;
	}
	
    return throttled;
}

/**
 * 使用示例：
 */
var count = 1;
var container = document.getElementById('container');
function getUserAction(e) {
    container.innerHTML = count++;
};
// 有头有尾：第一次执行，停止后还会执行一次
container.onmousemove = throttle(getUserAction, 1000);
// 无头有尾：禁用第一次执行
container.onmousemove = throttle(getUserAction, 1000, {
    leading: false
});
// 由头无尾：禁用停止后的执行
container.onmousemove = throttle(getUserAction, 1000, {
    trailing: false
});
